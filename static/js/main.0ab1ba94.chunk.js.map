{"version":3,"sources":["components/ReCaptach.js","utils/interact.js","components/Nav.js","App.js","setting.js","reportWebVitals.js","index.js"],"names":["ReCaptach","difference","moment","utc","Date","difference1","days","setDays","useState","hours","setHours","minutes","setMinutes","seconds","setSeconds","days1","setDays1","hours1","setHours1","minutes1","setMinutes1","seconds1","setSeconds1","verfied","setVerifed","useEffect","id","setTimeout","Math","floor","clearTimeout","window","ethereum","contract","setContract","undefined","ethAddress","setEthAddress","totalSupply","setTotalSupply","mintAmount","setMintAmount","latestTx","setlatestTx","nftUrl","setNftUrl","osLink","setOsLink","isOpen","onOpen","onClose","useDisclosure","_jsxs","className","style","marginTop","children","border","borderRadius","padding","display","alignItems","justifyContent","_jsx","fontWeight","marginLeft","background","concat","color","connectWallet","async","alert","address","addressArray","request","method","err","message","Nav","OutsideClickHandler","_ref","onOutsideClick","wrapperRef","useRef","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","ref","App","screenWidth","setScreenWidth","innerWidth","isCaptchaVerified","setCaptchaVerified","open","setOpen","walletAddress","setWallet","setwalletAdrress","handleResize","connectWalletPressed","walletResponse","Content","styled","div","_templateObject","_taggedTemplateLiteral","InfoRow","_templateObject2","InfoBox","_templateObject3","IconRow","_templateObject4","CollectionDescription","p","_templateObject5","_Fragment","index","HStack","flexDirection","width","position","Button","fontSize","maxWidth","colorScheme","size","onClick","slice","length","left","right","top","handleOutsideClick","console","log","Flex","gap","marginBottom","maxHeight","Text","href","rel","FaGlobe","FaTwitter","FaDiscord","Stack","divider","StackDivider","rounded","pos","ReCAPTCHA","sitekey","process","REACT_APP_RECAPTCHA_SITE_KEY","onChange","value","Image","src","alt","layout","height","minWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","ChakraProvider","ColorModeScript","initialColorMode","getElementById"],"mappings":"iQA2YeA,MA1WGA,KAChB,MAAMC,GAAc,IAAIC,IAAO,oBAAoBC,OAAS,IAAIC,KAC1DC,GAAe,IAAIH,IAAO,oBAAoBC,OAAS,IAAIC,MAC1DE,EAAMC,GAAWC,mBAAS,IAC1BC,EAAOC,GAAYF,mBAAS,IAC5BG,EAASC,GAAcJ,mBAAS,IAChCK,EAASC,GAAcN,mBAAS,IAChCO,EAAOC,GAAYR,mBAAS,IAC5BS,EAAQC,GAAaV,mBAAS,IAC9BW,EAAUC,GAAeZ,mBAAS,IAClCa,EAAUC,GAAed,mBAAS,IAElCe,EAASC,GAAchB,oBAAS,GAEvCiB,qBAAU,KACR,MAAMC,EAAKC,YAAW,KAChB1B,EAAa,IACfM,EAAQqB,KAAKC,MAAM5B,EAAU,QAC7BS,EAASkB,KAAKC,MAAO5B,EAAU,KAAuB,KACtDW,EAAWgB,KAAKC,MAAO5B,EAAa,IAAO,GAAM,KACjDa,EAAWc,KAAKC,MAAO5B,EAAa,IAAQ,MAE1CI,EAAc,IAChBW,EAASY,KAAKC,MAAMxB,EAAW,QAC/Ba,EAAUU,KAAKC,MAAOxB,EAAW,KAAuB,KACxDe,EAAYQ,KAAKC,MAAOxB,EAAc,IAAO,GAAM,KACnDiB,EAAYM,KAAKC,MAAOxB,EAAc,IAAQ,KAChD,GACC,KAEH,MAAO,KACLyB,aAAaJ,EAAG,CACjB,IASaK,OAAOC,SACvB,MACOC,EAAUC,GAAe1B,wBAAS2B,IAClCC,EAAYC,GAAiB7B,mBAAS,KACtC8B,EAAaC,GAAkB/B,mBAAS,IACxCgC,EAAYC,GAAiBjC,mBAAS,IACtCkC,EAAUC,GAAenC,mBAAS,KAClCoC,EAAQC,GAAarC,mBAAS,KAC9BsC,EAAQC,GAAavC,mBAAS,KAE/B,OAAEwC,EAAM,OAAEC,EAAM,QAAEC,GAAYC,cAsFpC,OACEC,eAAA,OAAKC,UAAU,oBAAoBC,MAAO,CAAEC,UAAW,IAAKC,SAAA,CAM1DJ,eAAA,OACEE,MAAO,CACLG,OAAQ,kBACRC,aAAc,MACdC,QAAS,QACTH,SAAA,CAEFJ,eAAA,OACEE,MAAO,CACLM,QAAS,OACTC,WAAY,SACZC,eAAgB,iBAChBN,SAAA,CAEFO,cAAA,MAAIT,MAAO,CAAEU,WAAY,QAASR,SAAC,YACnCJ,eAAA,OACEE,MAAO,CACLM,QAAS,OACTC,WAAY,UACZL,SAAA,CACH,aACY,IACXJ,eAAA,OAAKE,MAAO,CAAEM,QAAS,OAAQK,WAAY,QAAST,SAAA,CAClDO,cAAA,OACET,MAAO,CACLY,WAAY,OACZD,WAAY,MACZN,QAAS,MACTD,aAAc,OACdF,SAEDlD,EAAO,GAAE,IAAA6D,OAAO7D,GAASA,IAE5ByD,cAAA,OACET,MAAO,CACLY,WAAY,OACZD,WAAY,MACZN,QAAS,MACTD,aAAc,OACdF,SAED/C,EAAQ,GAAE,IAAA0D,OAAO1D,GAAUA,IAE9BsD,cAAA,OACET,MAAO,CACLY,WAAY,OACZD,WAAY,MACZN,QAAS,MACTD,aAAc,OACdF,SAED7C,EAAU,GAAE,IAAAwD,OAAOxD,GAAYA,IAElCoD,cAAA,OACET,MAAO,CACLY,WAAY,OACZD,WAAY,MACZN,QAAS,MACTD,aAAc,OACdF,SAED3C,EAAU,GAAE,IAAAsD,OAAOtD,GAAYA,aAKxCuC,eAAA,OACEE,MAAO,CACLM,QAAS,OACTE,eAAgB,gBAChBD,WAAY,SACZN,UAAW,QACXC,SAAA,CAEFJ,eAAA,KAAAI,SAAA,CAAG,2CAEDO,cAAA,SAAM,mCAERA,cAAA,UACET,MAAO,CACLY,WAAY,OACZR,aAAc,MACdC,QAAS,UACTS,MAAO,SACPZ,SACH,oBAMLJ,eAAA,OACEE,MAAO,CACLG,OAAQ,kBACRC,aAAc,MACdC,QAAS,OACTJ,UAAW,QACXC,SAAA,CAEFJ,eAAA,OACEE,MAAO,CACLM,QAAS,OACTC,WAAY,SACZC,eAAgB,iBAChBN,SAAA,CAEFO,cAAA,MAAIT,MAAO,CAAEU,WAAY,QAASR,SAAC,WACnCJ,eAAA,OACEE,MAAO,CACLM,QAAS,OACTC,WAAY,UACZL,SAAA,CACH,aACY,IACXJ,eAAA,OAAKE,MAAO,CAAEM,QAAS,OAAQK,WAAY,QAAST,SAAA,CAClDO,cAAA,OACET,MAAO,CACLY,WAAY,OACZD,WAAY,MACZN,QAAS,MACTD,aAAc,OACdF,SAEDzC,EAAQ,GAAE,IAAAoD,OAAOpD,GAAUA,IAE9BgD,cAAA,OACET,MAAO,CACLY,WAAY,OACZD,WAAY,MACZN,QAAS,MACTD,aAAc,OACdF,SAEDvC,EAAS,GAAE,IAAAkD,OAAOlD,GAAWA,IAEhC8C,cAAA,OACET,MAAO,CACLY,WAAY,OACZD,WAAY,MACZN,QAAS,MACTD,aAAc,OACdF,SAEDrC,EAAW,GAAE,IAAAgD,OAAOhD,GAAaA,IAEpC4C,cAAA,OACET,MAAO,CACLY,WAAY,OACZD,WAAY,MACZN,QAAS,MACTD,aAAc,OACdF,SAEDnC,EAAW,GAAE,IAAA8C,OAAO9C,GAAaA,aAK1C+B,eAAA,OACEE,MAAO,CACLM,QAAS,OACTE,eAAgB,gBAChBD,WAAY,SACZN,UAAW,QACXC,SAAA,CAEFJ,eAAA,KAAAI,SAAA,CAAG,2CAEDO,cAAA,SAAM,mCAERA,cAAA,UACET,MAAO,CACLY,WAAY,OACZR,aAAc,MACdC,QAAS,UACTS,MAAO,SACPZ,SACH,sBAqCD,ECvYH,MAAMa,EAAgBC,UAC3B,IAAIvC,OAAOC,SAiBT,OADAuC,MAAM,8BACC,CACLC,QAAS,IAjBX,IACE,MAAMC,QAAqB1C,OAAOC,SAAS0C,QAAQ,CACjDC,OAAQ,wBAKV,MAHY,CACVH,QAASC,EAAa,GAG1B,CAAE,MAAOG,GAEP,OADAL,MAAMK,EAAIC,SACH,CACLL,QAAS,GAEb,CAMF,E,0CCqGaM,I,UCjFf,MAAMC,EAAsBC,IAAmC,IAAlC,SAAExB,EAAQ,eAAEyB,GAAgBD,EACvD,MAAME,EAAaC,iBAAO,MAEpBC,EAAsBC,IACtBH,EAAWI,UAAYJ,EAAWI,QAAQC,SAASF,EAAMG,SAE3DP,GACF,EAaF,OAVAxD,qBAAU,KAERgE,SAASC,iBAAiB,YAAaN,GAGhC,KACLK,SAASE,oBAAoB,YAAaP,EAAmB,IAE9D,CAACA,IAEGrB,cAAA,OAAK6B,IAAKV,EAAW1B,SAAEA,GAAe,EAkXhCqC,MA9Vf,WACE,MAAOC,EAAaC,GAAkBvF,mBAASuB,OAAOiE,YACtCjE,OAAOC,SACvB,MACOC,EAAUC,GAAe1B,wBAAS2B,IAClCC,EAAYC,GAAiB7B,mBAAS,KACtC8B,EAAaC,GAAkB/B,mBAAS,IACxCgC,EAAYC,GAAiBjC,mBAAS,IACtCkC,EAAUC,GAAenC,mBAAS,KAClCoC,EAAQC,GAAarC,mBAAS,KAC9BsC,EAAQC,GAAavC,mBAAS,KAE/B,OAAEwC,EAAM,OAAEC,EAAM,QAAEC,GAAYC,eAG7B8C,EAAmBC,GAAsB1F,oBAAS,IAClD2F,EAAMC,GAAW5F,oBAAS,IAC1B6F,EAAeC,EAAWC,GAAoB/F,mBAAS,IAE9DiB,qBAAU,KACR,MAAM+E,EAAeA,KACnBT,EAAehE,OAAOiE,WAAW,EAOnC,OAHAjE,OAAO2D,iBAAiB,SAAUc,GAG3B,KACLzE,OAAO4D,oBAAoB,SAAUa,EAAa,CACnD,GACA,IAIH,MAOMC,EAAuBnC,UAC3B,MAAMoC,QAAuBrC,IAC7BiC,EAAUI,EAAelC,QAAQ,EAgB7BmC,EAAUC,IAAOC,IAAGC,MAAAC,YAAA,gJASpBC,EAAUJ,IAAOC,IAAGI,MAAAF,YAAA,6JASpBG,EAAUN,IAAOC,IAAGM,MAAAJ,YAAA,0YAkBpBK,EAAUR,IAAOC,IAAGQ,MAAAN,YAAA,8MAUpBO,EAAwBV,IAAOW,EAACC,MAAAT,YAAA,2GAoBtC,OACEhD,cAAA0D,WAAA,CAAAjE,SACEJ,eAAA,QAAAI,SAAA,CACEO,cAAA,SAAO2D,OAAK,EAAAlE,SAAA,+TAaZJ,eAAAqE,WAAA,CAAAjE,SAAA,CAEEO,cAAC4D,IAAM,CAACC,cAAc,SAAQpE,SAC5BO,cAAA,OACET,MAAO,CACLK,QAAS,YACTkE,MAAO,OACPjE,QAAS,OACTC,WAAY,SACZC,eAAgB,OAChBN,SAGiB,KAAlB6C,EACCjD,eAAA,OAAKE,MAAO,CAAEwE,SAAU,YAAatE,SAAA,CACnCJ,eAAC2E,IAAM,CACL3D,MAAM,QACNJ,WAAW,OACXgE,SAAS,SACTC,SAAS,OACTC,YAAY,SACZC,KAAK,KACLC,QAASA,IAAMhC,GAAQ,GAAM5C,SAAA,CAGf,OAAb6C,QAAa,IAAbA,OAAa,EAAbA,EAAegC,MAAM,EAAG,GAAG,MACd,OAAbhC,QAAa,IAAbA,OAAa,EAAbA,EAAegC,MAAMhC,EAAciC,OAAS,EAAGjC,EAAciC,WAE/DnC,GACCpC,cAAA,OACET,MAAO,CACLwE,SAAU,WACVS,KAAM,EACNC,MAAO,EACPC,IAAK,OACLvE,WAAY,QACZP,QAAS,GACTF,OAAQ,iBACRC,aAAc,OACdF,SAGFO,cAACgB,EAAmB,CAACE,eArJdyD,KACzBC,QAAQC,IAAI,oBACZxC,GAASD,EAAK,EAmJ4D3C,SACtDO,cAACgE,IAAM,CACL1E,UAAU,8GACVC,MAAO,CAAEuE,MAAO,QAChBzD,MAAM,QACNJ,WAAW,OACXgE,SAAS,SACTC,SAAS,OACTC,YAAY,SACZC,KAAK,KACLC,QAASA,KAnJ/B7B,EAAiB,aACjBhC,MAAM,iBAkJyDf,SAC1C,sBAQTO,cAACgE,IAAM,CACLG,YAAY,SACZC,KAAK,KACLC,QAASA,IAAM3B,IAAuBjD,SACvC,sBAMPJ,eAACyF,IAAI,CACHC,IAAKhD,EAAc,IAAM,OAAS,OAClCiD,aAAa,OACblF,WAAW,SACXC,eAAe,SACf8D,cAAe9B,EAAc,KAAO,SAAW,MAAMtC,SAAA,CAErDO,cAAA,OAAAP,SACEJ,eAACyF,IAAI,CACHhB,MAAM,OACNI,SAAS,QACTrE,QAAQ,OACRgE,cAAc,SACd9D,eAAe,SACfM,MAAM,QAEN4E,UAAU,OAAMxF,SAAA,CAEhBO,cAAC8E,IAAI,CAAArF,SACHJ,eAACuD,EAAO,CAAAnD,SAAA,CACNO,cAACkF,IAAI,CACHpF,WAAW,SACXC,eAA0B,SAC1BM,MAAM,QACN4D,SAAoB,MACpBhE,WAAW,OAAMR,SClTb,oBDsTNJ,eAAC4D,EAAO,CAAAxD,SAAA,CACNO,cAAA0D,WAAA,IAEArE,eAAC8D,EAAO,CAAA1D,SAAA,CACNO,cAAA,KAAAP,SAAG,gBACHO,cAAA,KAAAP,SAAG,SAGLJ,eAACgE,EAAO,CAAA5D,SAAA,CACNO,cAAA,KAAGmF,KAAK,IAAI1D,OAAO,SAAS2D,IAAI,sBAAqB3F,SACnDO,cAACqF,IAAO,MAEVrF,cAAA,KAAGmF,KAAK,IAAI1D,OAAO,SAAS2D,IAAI,sBAAqB3F,SACnDO,cAACsF,IAAS,MAEZtF,cAAA,KAAGmF,KAAK,IAAI1D,OAAO,SAAS2D,IAAI,sBAAqB3F,SACnDO,cAACuF,IAAS,YAIhBvF,cAACuD,EAAqB,CAAA9D,SCzUL,sOD4UjBO,cAAA,OAAKT,MAAO,CAAEuE,MAAO,QAASrE,SACT,KAAlB6C,EACC,KAEAtC,cAACgE,IAAM,CACLzE,MAAO,CAAEuE,MAAO,QAChBK,YAAY,SACZC,KAAK,KACLC,QAASA,IAAM3B,IAAuBjD,SACvC,yBAQTO,cAAC8E,IAAI,CAAChB,MAAM,OAAOiB,IAAI,OAAMtF,SAE3BO,cAACwF,IAAK,CACJC,QAASzF,cAAC0F,IAAY,IACtB5B,MAAM,OACNjE,QAAQ,OACR8F,QAAS,KACTC,IAAK,WAAWnG,SAEfyC,EACClC,cAAE/D,EAAS,IAGX+D,cAAC6F,IAAS,CACRC,QACEC,mIAAYC,8BACZ,6CAEFC,SAAWC,IACTtB,QAAQC,IAAI,iBAAkBqB,GAC9B/D,GAAmB,EAAK,QAelCnC,cAAC8E,IAAI,CAAChB,MAAM,OAAOiB,IAAI,OAAMtF,SAC3BO,cAACwF,IAAK,CACJC,QAASzF,cAAC0F,IAAY,IACtB5B,MAAM,OACNjE,QAAQ,OACR8F,QAAS,KACTC,IAAK,oBAKb5F,cAAA,OAAAP,SACEO,cAAC8E,IAAI,CAACzE,MAAM,QAAQwD,cAAc,SAAQpE,SACxCO,cAACmG,IAAK,CACJC,IClZG,gBDmZHC,IAAI,gBACJC,OAAO,aACPxC,MAAO,IACPyC,OAAQ,IACRhH,MAAO,CACLiH,SAAUzE,EAAc,IAAM,QAAU,QACxCwE,OAAQ,wBAU5B,EEjaeE,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK3F,IAAkD,IAAjD,OAAE4F,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAAShG,EACpE4F,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EAAY,GAExB,E,gBCiCFQ,IAASC,OACPnH,cAACoH,IAAMC,WAAU,CAAA5H,SAGfJ,eAACiI,IAAc,CAAA7H,SAAA,CACbO,cAACuH,IAAe,CAACC,iBAAiB,SAElCxH,cAAC8B,EAAG,SAIRJ,SAAS+F,eAAe,SAO1BhB,G","file":"static/js/main.0ab1ba94.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport moment from 'moment';\n\nimport MintingContract from '../MintingContract.json';\nimport {\n  Center,\n  Box,\n  Head,\n  Image,\n  Button,\n  HStack,\n  VStack,\n  Heading,\n  Flex,\n  Link,\n  Card,\n  CardBody,\n  StackDivider,\n  Stack,\n  useToast,\n  Text,\n  useDisclosure,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  useMediaQuery,\n  Progress,\n} from '@chakra-ui/react';\nconst ReCaptach = () => {\n  const difference = +new moment('2023-12-04 05:30').utc() - +new Date();\n  const difference1 = +new moment('2023-12-06 05:30').utc() - +new Date();\n  const [days, setDays] = useState(0);\n  const [hours, setHours] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n  const [days1, setDays1] = useState(0);\n  const [hours1, setHours1] = useState(0);\n  const [minutes1, setMinutes1] = useState(0);\n  const [seconds1, setSeconds1] = useState(0);\n\n  const [verfied, setVerifed] = useState(false);\n\n  useEffect(() => {\n    const id = setTimeout(() => {\n      if (difference > 0) {\n        setDays(Math.floor(difference / (1000 * 60 * 60 * 24)));\n        setHours(Math.floor((difference / (1000 * 60 * 60)) % 24));\n        setMinutes(Math.floor((difference / 1000 / 60) % 60));\n        setSeconds(Math.floor((difference / 1000) % 60));\n      }\n      if (difference1 > 0) {\n        setDays1(Math.floor(difference1 / (1000 * 60 * 60 * 24)));\n        setHours1(Math.floor((difference1 / (1000 * 60 * 60)) % 24));\n        setMinutes1(Math.floor((difference1 / 1000 / 60) % 60));\n        setSeconds1(Math.floor((difference1 / 1000) % 60));\n      }\n    }, 1000);\n\n    return () => {\n      clearTimeout(id);\n    };\n  });\n\n  //recaptcha function\n  function onChange(value) {\n    console.log('Captcha value:', value);\n    setVerifed(true);\n  }\n\n  let ethWindow = window.ethereum;\n  const CONTRACT_ADDRESS = '0x77C9e7733550026AcE28950e973681C0F74191E3';\n  const [contract, setContract] = useState(undefined);\n  const [ethAddress, setEthAddress] = useState('');\n  const [totalSupply, setTotalSupply] = useState(0);\n  const [mintAmount, setMintAmount] = useState(1);\n  const [latestTx, setlatestTx] = useState('');\n  const [nftUrl, setNftUrl] = useState('');\n  const [osLink, setOsLink] = useState('');\n  const totalNfts = 8888;\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  // metamask related function\n\n  const connectWallet = async () => {\n    let provider = window.ethereum;\n\n    if (typeof provider !== 'undefined') {\n      // MetaMask is installed\n\n      provider\n        .request({ method: 'eth_requestAccounts' })\n        .then((accounts) => {\n          setEthAddress(accounts[0]);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  const disconnectWallet = () => {\n    setEthAddress('');\n    alert('disconnected');\n  };\n\n  const loadBlockchain = async () => {\n    let provider = window.ethereum;\n    const web3 = new Web3(provider);\n\n    const contract = new web3.eth.Contract(\n      MintingContract.abi,\n      CONTRACT_ADDRESS\n    );\n    setContract(contract);\n  };\n\n  const buyFlys = (number) => {\n    if (contract !== undefined && ethAddress !== '') {\n      var value = number * 20000000;\n\n      contract.methods\n        .buyFlys(number)\n        .send({ from: ethAddress, value: value })\n        .then((tx) => {\n          console.log(tx);\n          setlatestTx(tx.transactionHash);\n          setOsLink(\n            'https://opensea.io/assets/' +\n            tx.to +\n            '/' +\n            tx.events.Transfer.returnValues.tokenId\n          );\n          console.log(osLink);\n          onOpen();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n  const mintGiveawayFlys = (number) => {\n    if (contract !== undefined && ethAddress !== '') {\n      var value = number * 20000000;\n\n      contract.methods\n        .GiveawayFlys(number)\n        .send({ from: ethAddress, value: value })\n        .then((tx) => {\n          console.log(tx);\n          setlatestTx(tx.transactionHash);\n          setOsLink(\n            'https://opensea.io/assets/' +\n            tx.to +\n            '/' +\n            tx.events.Transfer.returnValues.tokenId\n          );\n          console.log(osLink);\n          onOpen();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  return (\n    <div className=\"container,display\" style={{ marginTop: 10 }}>\n      {/* <ReCAPTCHA\n        sitekey=\"6Ld4vh4pAAAAAFZ6Mw4U_W4yED0KiaUOUlmTDbEv\"\n        onChange={onChange}\n      /> */}\n      {/* WL MINT */}\n      <div\n        style={{\n          border: '1px solid white',\n          borderRadius: '5px',\n          padding: '20px',\n        }}\n      >\n        <div\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n          }}\n        >\n          <h1 style={{ fontWeight: 'bold' }}>WL MINT</h1>\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n            }}\n          >\n            Ending in:{' '}\n            <div style={{ display: 'flex', marginLeft: '10px' }}>\n              <div\n                style={{\n                  background: 'blue',\n                  marginLeft: '7px',\n                  padding: '5px',\n                  borderRadius: '3px',\n                }}\n              >\n                {days < 10 ? `0${days}` : days}\n              </div>\n              <div\n                style={{\n                  background: 'blue',\n                  marginLeft: '7px',\n                  padding: '5px',\n                  borderRadius: '3px',\n                }}\n              >\n                {hours < 10 ? `0${hours}` : hours}\n              </div>\n              <div\n                style={{\n                  background: 'blue',\n                  marginLeft: '7px',\n                  padding: '5px',\n                  borderRadius: '3px',\n                }}\n              >\n                {minutes < 10 ? `0${minutes}` : minutes}\n              </div>\n              <div\n                style={{\n                  background: 'blue',\n                  marginLeft: '7px',\n                  padding: '5px',\n                  borderRadius: '3px',\n                }}\n              >\n                {seconds < 10 ? `0${seconds}` : seconds}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginTop: '10px',\n          }}\n        >\n          <p>\n            Only users who are Whitelisted can mint!\n            <br />5 per wallet 0.01 SOL per NFT\n          </p>\n          <button\n            style={{\n              background: 'blue',\n              borderRadius: '5px',\n              padding: '5px 7px',\n              color: 'white',\n            }}\n          >\n            Mint Now!\n          </button>\n        </div>\n      </div>\n      {/* PUBLIC */}\n      <div\n        style={{\n          border: '1px solid white',\n          borderRadius: '5px',\n          padding: '20px',\n          marginTop: '20px',\n        }}\n      >\n        <div\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n          }}\n        >\n          <h1 style={{ fontWeight: 'bold' }}>PUBLIC</h1>\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n            }}\n          >\n            Ending in:{' '}\n            <div style={{ display: 'flex', marginLeft: '10px' }}>\n              <div\n                style={{\n                  background: 'blue',\n                  marginLeft: '7px',\n                  padding: '5px',\n                  borderRadius: '3px',\n                }}\n              >\n                {days1 < 10 ? `0${days1}` : days1}\n              </div>\n              <div\n                style={{\n                  background: 'blue',\n                  marginLeft: '7px',\n                  padding: '5px',\n                  borderRadius: '3px',\n                }}\n              >\n                {hours1 < 10 ? `0${hours1}` : hours1}\n              </div>\n              <div\n                style={{\n                  background: 'blue',\n                  marginLeft: '7px',\n                  padding: '5px',\n                  borderRadius: '3px',\n                }}\n              >\n                {minutes1 < 10 ? `0${minutes1}` : minutes1}\n              </div>\n              <div\n                style={{\n                  background: 'blue',\n                  marginLeft: '7px',\n                  padding: '5px',\n                  borderRadius: '3px',\n                }}\n              >\n                {seconds1 < 10 ? `0${seconds1}` : seconds1}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginTop: '10px',\n          }}\n        >\n          <p>\n            Only users who are Whitelisted can mint!\n            <br />5 per wallet 0.01 SOL per NFT\n          </p>\n          <button\n            style={{\n              background: 'blue',\n              borderRadius: '5px',\n              padding: '5px 7px',\n              color: 'white',\n            }}\n          >\n            Mint Now!\n          </button>\n        </div>\n      </div>\n\n      {/* <div id=\"wrapper\">\n        <div>\n          <p>Public Mint:</p>\n          <Button\n            style={{\n              width: '100%',\n              border: '1px solid #ccc',\n              marginTop: '10px',\n            }}\n            colorScheme=\"black\"\n            size=\"lg\"\n            onClick={() => buyFlys(mintAmount)}\n          >\n            {' '}\n            <Text></Text> MINT\n          </Button>\n        </div>\n        <div>\n          <p style={{ margin: '10px 0' }}>Allow List Mint:</p>\n          <Button\n            style={{ width: '100%' }}\n            disabled={!verfied}\n            colorScheme=\"black\"\n            size=\"lg\"\n            onClick={() => mintGiveawayFlys(mintAmount)}\n          >\n            {' '}\n            Whitelist Mint\n          </Button>\n        </div>\n      </div> */}\n    </div>\n  );\n};\n\nexport default ReCaptach;\n","export const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      alert(err.message);\r\n      return {\r\n        address: \"\",\r\n      };\r\n    }\r\n  } else {\r\n    alert(\"Metamask is not installed!\");\r\n    return {\r\n      address: \"\",\r\n    };\r\n  }\r\n};\r\nexport const disconnectWallet = async () => {\r\n  await window.ethereum.request({\r\n    method: \"eth_requestAccounts\",\r\n    params: [{ eth_accounts: {} }]\r\n  })\r\n};\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n    };\r\n  }\r\n};\r\n\r\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Button, HStack, useToast } from '@chakra-ui/react';\nimport { disconnectWallet, connectWallet, getCurrentWalletConnected } from \"../utils/interact.js\";\nconst OutsideClickHandler = ({ children, onOutsideClick }) => {\n  const wrapperRef = useRef(null);\n\n  const handleClickOutside = (event) => {\n    if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {\n      // Clicked outside the specified element\n      onOutsideClick();\n    }\n  };\n\n  useEffect(() => {\n    // Attach the event listener when the component mounts\n    document.addEventListener('mousedown', handleClickOutside);\n\n    // Detach the event listener when the component unmounts\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n\n  return <div ref={wrapperRef}>{children}</div>;\n};\n\nfunction Nav({ }) {\n  const toast = useToast();\n  const [open, setOpen] = useState(false);\n  const [walletAddress, setWallet, setwalletAdrress] = useState(\"\");\n\n  const handleOutsideClick = () => {\n    console.log('Clicked outside!');\n    setOpen(!open);\n    // Add your logic for handling clicks outside the element\n  };\n\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setWallet(walletResponse.address);\n  };\n  const disconnectWalletPressed = () => {\n    setwalletAdrress('null');\n    alert('disconnected');\n  };\n\n\n\n  return (\n    <div class=\"Aligner-item Aligner-item--top\">\n      <HStack flexDirection=\"column\">\n        <div\n          style={{\n            padding: '10px 20px',\n            width: '100%',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'end',\n          }}\n        >\n\n          {walletAddress !== '' ? (\n            <div style={{ position: 'relative' }}>\n              <Button\n                color=\"white\"\n                fontWeight=\"bold\"\n                fontSize=\"1.5rem\"\n                maxWidth=\"100%\"\n                colorScheme=\"purple\"\n                size=\"lg\"\n                onClick={() => setOpen(true)}\n              >\n                {/* Disconnect */}\n                {walletAddress?.slice(0, 6)}...\n                {walletAddress?.slice(walletAddress.length - 4, walletAddress.length)}\n              </Button>\n              {open && (\n                <div\n                  style={{\n                    position: 'absolute',\n                    left: 0,\n                    right: 0,\n                    top: '50px',\n                    background: 'black',\n                    padding: 10,\n                    border: '1px solid #ccc',\n                    borderRadius: '8px',\n                  }}\n                >\n                  <OutsideClickHandler onOutsideClick={handleOutsideClick}>\n                    <Button\n                      style={{ width: '100%' }}\n                      color=\"white\"\n                      fontWeight=\"bold\"\n                      fontSize=\"1.5rem\"\n                      maxWidth=\"100%\"\n                      colorScheme=\"purple\"\n                      size=\"lg\"\n                      onClick={() => disconnectWalletPressed()}\n                    >\n                      Disconnect\n                    </Button>\n                  </OutsideClickHandler>\n                </div>\n              )}\n            </div>\n          ) : (\n            <Button\n              colorScheme=\"purple\"\n              size=\"lg\"\n              onClick={() => connectWalletPressed()}\n            >\n              Select Wallet\n            </Button>\n          )}\n        </div>\n      </HStack>\n    </div>\n  );\n}\n\nexport default Nav;\n","import './App.css';\nimport Web3 from 'web3';\nimport MintingContract from './MintingContract.json';\nimport { useEffect, useState, useRef } from 'react';\nimport { image, headerText, collectionDescription } from './setting';\nimport styled from 'styled-components';\nimport { CiGlobe, CiTwitter } from 'react-icons/ci';\nimport { FaDiscord, FaGlobe, FaTwitter } from 'react-icons/fa';\nimport ReCaptach from './components/ReCaptach';\n// import { useWeb3React } from \"@web3-react/core\";\nimport { disconnectWallet, connectWallet, getCurrentWalletConnected } from \"./utils/interact.js\";\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport {\n  Center,\n  Box,\n  Head,\n  Image,\n  Button,\n  HStack,\n  VStack,\n  Heading,\n  Flex,\n  Link,\n  StackDivider,\n  Stack,\n  useToast,\n  Text,\n  useDisclosure,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  useMediaQuery,\n  Progress,\n} from '@chakra-ui/react';\nimport Nav from './components/Nav';\n\n\nconst OutsideClickHandler = ({ children, onOutsideClick }) => {\n  const wrapperRef = useRef(null);\n\n  const handleClickOutside = (event) => {\n    if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {\n      // Clicked outside the specified element\n      onOutsideClick();\n    }\n  };\n\n  useEffect(() => {\n    // Attach the event listener when the component mounts\n    document.addEventListener('mousedown', handleClickOutside);\n\n    // Detach the event listener when the component unmounts\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n\n  return <div ref={wrapperRef}>{children}</div>;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction App() {\n  const [screenWidth, setScreenWidth] = useState(window.innerWidth);\n  let ethWindow = window.ethereum;\n  const CONTRACT_ADDRESS = '0x77C9e7733550026AcE28950e973681C0F74191E3';\n  const [contract, setContract] = useState(undefined);\n  const [ethAddress, setEthAddress] = useState('');\n  const [totalSupply, setTotalSupply] = useState(0);\n  const [mintAmount, setMintAmount] = useState(1);\n  const [latestTx, setlatestTx] = useState('');\n  const [nftUrl, setNftUrl] = useState('');\n  const [osLink, setOsLink] = useState('');\n  const totalNfts = 8888;\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  // const { active, library, connector, activate, deactivate } =\n  //   useWeb3React();\n  const [isCaptchaVerified, setCaptchaVerified] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [walletAddress, setWallet, setwalletAdrress] = useState(\"\");\n\n  useEffect(() => {\n    const handleResize = () => {\n      setScreenWidth(window.innerWidth);\n    };\n\n    // Add event listener to update screen width on resize\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup the event listener on component unmount\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // metamask related function\n\n  const handleOutsideClick = () => {\n    console.log('Clicked outside!');\n    setOpen(!open);\n    // Add your logic for handling clicks outside the element\n  };\n\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setWallet(walletResponse.address);\n  };\n  const disconnectWalletPressed = () => {\n    setwalletAdrress('null');\n    alert('disconnected');\n  };\n\n\n\n\n\n\n\n\n\n\n  const Content = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    padding: 0px;\n    gap: 32px;\n    width: 100%;\n  `;\n\n  const InfoRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    width: 100%;\n    padding: 0;\n    gap: 16px;\n    flex-wrap: wrap;\n  `;\n  const InfoBox = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    padding: 10px 16px;\n    gap: 8px;\n    border: 2px solid #ffffff;\n    border-radius: 4px;\n    font-weight: 600;\n    font-size: 20px;\n    line-height: 100%;\n    text-transform: uppercase;\n    color: var(--white);\n\n    @media only screen and (max-width: 450px) {\n      font-size: 18px;\n    }\n  `;\n  const IconRow = styled.div`\n    display: flex;\n    justify-content: space-between;\n    flex-direction: row;\n    align-items: center;\n    padding: 0px;\n    gap: 24px;\n    margin-bottom: -3px;\n    margin-left: 1rem;\n  `;\n  const CollectionDescription = styled.p`\n    font-weight: 400;\n    font-size: 20px;\n    line-height: 150%;\n    margin-bottom: 1rem;\n  `;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  return (\n    <>\n      <main>\n        <style index>\n          {`\n            html {\n              height: 100%;\n              background: black; /* fallback for old browsers */\n            }\n            body {\n              // background: #673ab7; /* fallback for old browsers */\n              background: black; /* fallback for old browsers */\n            }\n          `}\n        </style>\n\n        <>\n\n          <HStack flexDirection=\"column\">\n            <div\n              style={{\n                padding: '10px 20px',\n                width: '100%',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'end',\n              }}\n            >\n\n              {walletAddress !== '' ? (\n                <div style={{ position: 'relative' }}>\n                  <Button\n                    color=\"white\"\n                    fontWeight=\"bold\"\n                    fontSize=\"1.5rem\"\n                    maxWidth=\"100%\"\n                    colorScheme=\"purple\"\n                    size=\"lg\"\n                    onClick={() => setOpen(true)}\n                  >\n                    {/* Disconnect */}\n                    {walletAddress?.slice(0, 6)}...\n                    {walletAddress?.slice(walletAddress.length - 4, walletAddress.length)}\n                  </Button>\n                  {open && (\n                    <div\n                      style={{\n                        position: 'absolute',\n                        left: 0,\n                        right: 0,\n                        top: '50px',\n                        background: 'black',\n                        padding: 10,\n                        border: '1px solid #ccc',\n                        borderRadius: '8px',\n                      }}\n                    >\n\n                      <OutsideClickHandler onOutsideClick={handleOutsideClick}>\n                        <Button\n                          className='button.wallet-adapter-button-trigger , button.wallet-adapter-button-trigger:hover , wallet-adapter-dropdown'\n                          style={{ width: '100%' }}\n                          color=\"white\"\n                          fontWeight=\"bold\"\n                          fontSize=\"1.5rem\"\n                          maxWidth=\"100%\"\n                          colorScheme=\"purple\"\n                          size=\"lg\"\n                          onClick={() => disconnectWalletPressed()}\n                        >\n                          Disconnect\n                        </Button>\n                      </OutsideClickHandler>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <Button\n                  colorScheme=\"purple\"\n                  size=\"lg\"\n                  onClick={() => connectWalletPressed()}\n                >\n                  Select Wallet\n                </Button>\n              )}\n            </div>\n          </HStack>\n          <Flex\n            gap={screenWidth > 650 ? '20px' : '10px'}\n            marginBottom=\"20px\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            flexDirection={screenWidth < 1100 ? 'column' : 'row'}\n          >\n            <div>\n              <Flex\n                width=\"100%\"\n                maxWidth=\"600px\"\n                display=\"flex\"\n                flexDirection=\"column\"\n                justifyContent=\"center\"\n                color=\"white\"\n                // height=\"45rem\"\n                maxHeight=\"100%\"\n              >\n                <Flex>\n                  <Content>\n                    <Text\n                      alignItems=\"center\"\n                      justifyContent={'650px' ? 'center' : 'flex-start'}\n                      color=\"white\"\n                      fontSize={'650px' ? '5vh' : '3.5rem'}\n                      fontWeight=\"bold\"\n                    >\n                      {headerText}\n                    </Text>\n                    <InfoRow>\n                      <></>\n\n                      <InfoBox>\n                        <p>Total items</p>\n                        <p> </p>\n                      </InfoBox>\n\n                      <IconRow>\n                        <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n                          <FaGlobe></FaGlobe>\n                        </a>\n                        <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n                          <FaTwitter></FaTwitter>\n                        </a>\n                        <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n                          <FaDiscord></FaDiscord>\n                        </a>\n                      </IconRow>\n                    </InfoRow>\n                    <CollectionDescription>\n                      {collectionDescription}\n                    </CollectionDescription>\n                    <div style={{ width: '100%' }}>\n                      {walletAddress !== '' ? (\n                        null\n                      ) : (\n                        <Button\n                          style={{ width: '100%' }}\n                          colorScheme=\"purple\"\n                          size=\"lg\"\n                          onClick={() => connectWalletPressed()}\n                        >\n                          Select Wallet\n                        </Button>\n                      )}\n                    </div>\n                  </Content>\n                </Flex>\n\n                <Flex width=\"100%\" gap=\"20px\">\n\n                  <Stack\n                    divider={<StackDivider />}\n                    width=\"100%\"\n                    display=\"flex\"\n                    rounded={\"lg\"}\n                    pos={\"relative\"}\n                  >\n                    {isCaptchaVerified ? (\n                      < ReCaptach\n                      />\n                    ) : (\n                      <ReCAPTCHA\n                        sitekey={\n                          process.env.REACT_APP_RECAPTCHA_SITE_KEY ||\n                          \" 6Le4rSQpAAAAAMTiGCwY1nAPW0I6cKFrvLSXSsKK \"\n                        }\n                        onChange={(value) => {\n                          console.log(\"Captcha value:\", value);\n                          setCaptchaVerified(true);\n                        }}\n                      />\n\n                    )}\n                  </Stack>\n\n                </Flex>\n                {/* <Text marginBottom=\"30px\" width=\"100%\">\n                  Lorem ipsum dolor sit amet consectetur adipisicing elit.\n                  Adipisci laudantium at, error reprehenderit minima\n                  repellendus! Eveniet voluptatem iusto repudiandae suscipit,\n                  expedita quibusdam quaerat officiis atque at ab libero, labore\n                  eaque!\n                </Text> */}\n                <Flex width=\"100%\" gap=\"20px\">\n                  <Stack\n                    divider={<StackDivider />}\n                    width=\"100%\"\n                    display=\"flex\"\n                    rounded={'lg'}\n                    pos={'relative'}\n                  ></Stack>\n                </Flex>\n              </Flex>\n            </div>\n            <div>\n              <Flex color=\"white\" flexDirection=\"column\">\n                <Image\n                  src={image}\n                  alt=\"project Image\"\n                  layout=\"responsive\"\n                  width={100}\n                  height={100}\n                  style={{\n                    minWidth: screenWidth < 650 ? '400px' : '500px',\n                    height: 'auto',\n                  }}\n                />\n              </Flex>\n            </div>\n          </Flex>\n        </>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","// Purpose: Contains texts that will be used in the UI when rendering the buttons\n// label has to be the exact same as in your candy machine config\n\nexport const mintText = [\n    { label: \"WL\", mintText: \"Only users who are whitelisted can mint!\", buttonLabel: \"Mint now!\", buttonDisabledLabel: \"Mint now!\", header: \"WL Mint\" },\n    { label: \"default\", mintText: \"default mint paying with SOL\", buttonLabel: \"Mint now!\", buttonDisabledLabel: \"Mint now!\", header: \"default Mint\" },\n    { label: \"Public\", mintText: \"Public mint! All users can mint\", buttonLabel: \"Mint now!\", buttonDisabledLabel: \"Mint now!\", header: \"public\" }\n];\n\n//header image in the ui. replace with your own\nexport const image = \"./display.gif\";\n\n//website title\nexport const headerText = \"COLLECTION NAME\";\nexport const collectionDescription = \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Rem minima velit aliquid voluptates quasi placeat corporis dicta maxime. Ad, similique. Veritatis corrupti eveniet eligendi ratione autem. Dolores cumque dolorem harum.\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\";\n// import { createWeb3Modal, defaultWagmiConfig } from \"@web3modal/wagmi\";\n\n// import { WagmiConfig } from \"wagmi\";\n// import { arbitrum, mainnet, zkSyncTestnet } from \"wagmi/chains\";\n\n// // Replace this project ID with yours\n// // from cloud.walletconnect.com\n// const projectId = \"37cb57030ec6da095696eb90cfaffa90\";\n\n// const chains = [mainnet, arbitrum, zkSyncTestnet];\n\n// const wagmiConfig = defaultWagmiConfig({\n//   projectId,\n//   chains,\n//   metadata: {\n//     name: \"test\",\n//   },\n// });\n\n// createWeb3Modal({\n//   chains,\n//   projectId,\n//   wagmiConfig,\n// });\n\n\n// ReactDOM.createRoot(document.getElementById(\"root\")).render(\n//   <React.StrictMode>\n//     <WagmiConfig config={wagmiConfig}>\n//       <ChakraProvider>\n//         {/* <ColorModeScript initialColorMode=\"dark\" /> */}\n//         <App />\n//       </ChakraProvider>\n//     </WagmiConfig>\n//   </React.StrictMode>,\n// );\nReactDOM.render(\n  <React.StrictMode>\n\n    {/* <WagmiConfig config={wagmiConfig}>    </WagmiConfig> */}\n    <ChakraProvider>\n      <ColorModeScript initialColorMode=\"dark\" />\n\n      <App />\n    </ChakraProvider>\n\n  </React.StrictMode >,\n  document.getElementById(\"root\")\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}