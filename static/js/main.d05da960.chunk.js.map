{"version":3,"sources":["components/Nav.js","components/ReCaptach.js","App.js","setting.js","reportWebVitals.js","index.js"],"names":["OutsideClickHandler","_ref","children","onOutsideClick","wrapperRef","useRef","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","_jsx","ref","Nav","_ref2","connectWallet","disconnectWallet","ethAddress","useToast","open","setOpen","useState","class","HStack","flexDirection","style","padding","width","display","alignItems","justifyContent","_jsxs","position","Button","color","fontWeight","fontSize","maxWidth","colorScheme","size","onClick","slice","length","left","right","top","background","border","borderRadius","handleOutsideClick","console","log","ReCaptach","App","screenWidth","setScreenWidth","window","innerWidth","ethWindow","ethereum","contract","setContract","undefined","setEthAddress","totalSupply","setTotalSupply","mintAmount","setMintAmount","latestTx","setlatestTx","nftUrl","setNftUrl","osLink","setOsLink","isOpen","onOpen","onClose","useDisclosure","handleResize","async","provider","request","method","then","accounts","catch","err","getSupply","Web3","eth","Contract","MintingContract","abi","loadBlockchain","buyFlys","number","value","methods","send","from","tx","transactionHash","to","events","Transfer","returnValues","tokenId","currentSupply","call","supply","Content","styled","div","_templateObject","_taggedTemplateLiteral","InfoRow","_templateObject2","InfoBox","_templateObject3","IconRow","_templateObject4","CollectionDescription","p","_templateObject5","difference","moment","utc","Date","difference1","days","setDays","hours","setHours","minutes","setMinutes","seconds","setSeconds","days1","setDays1","hours1","setHours1","minutes1","setMinutes1","seconds1","setSeconds1","verfied","setVerifed","id","setTimeout","Math","floor","clearTimeout","_Fragment","index","alert","Flex","gap","marginBottom","maxHeight","Text","href","rel","FaGlobe","FaTwitter","FaDiscord","className","marginTop","marginLeft","concat","Stack","divider","StackDivider","rounded","pos","Image","src","alt","layout","height","minWidth","marginRight","mt","Progress","Number","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","ChakraProvider","ColorModeScript","initialColorMode","getElementById"],"mappings":"0SAGA,MAAMA,EAAsBC,IAAmC,IAAlC,SAAEC,EAAQ,eAAEC,GAAgBF,EACvD,MAAMG,EAAaC,iBAAO,MAEpBC,EAAsBC,IACtBH,EAAWI,UAAYJ,EAAWI,QAAQC,SAASF,EAAMG,SAE3DP,GACF,EAaF,OAVAQ,qBAAU,KAERC,SAASC,iBAAiB,YAAaP,GAGhC,KACLM,SAASE,oBAAoB,YAAaR,EAAmB,IAE9D,CAACA,IAEGS,cAAA,OAAKC,IAAKZ,EAAWF,SAAEA,GAAe,EAgHhCe,MA7Gf,SAAYC,GAAmD,IAAlD,cAAEC,EAAa,iBAAEC,EAAgB,WAAEC,GAAYH,EAC5CI,cAAd,MACOC,EAAMC,GAAWC,oBAAS,GAQjC,OACEV,cAAA,OAAKW,MAAM,iCAAgCxB,SACzCa,cAACY,IAAM,CAACC,cAAc,SAAQ1B,SAC5Ba,cAAA,OACEc,MAAO,CACLC,QAAS,YACTC,MAAO,OACPC,QAAS,OACTC,WAAY,SACZC,eAAgB,OAChBhC,SAoBc,KAAfmB,EACCc,eAAA,OAAKN,MAAO,CAAEO,SAAU,YAAalC,SAAA,CACnCiC,eAACE,IAAM,CACLC,MAAM,QACNC,WAAW,OACXC,SAAS,SACTC,SAAS,OACTC,YAAY,SACZC,KAAK,KACLC,QAASA,IAAMpB,GAAQ,GASvBtB,SAAA,CAGW,OAAVmB,QAAU,IAAVA,OAAU,EAAVA,EAAYwB,MAAM,EAAG,GAAG,MACd,OAAVxB,QAAU,IAAVA,OAAU,EAAVA,EAAYwB,MAAMxB,EAAWyB,OAAS,EAAGzB,EAAWyB,WAEtDvB,GACCR,cAAA,OACEc,MAAO,CACLO,SAAU,WACVW,KAAM,EACNC,MAAO,EACPC,IAAK,OACLC,WAAY,QACZpB,QAAS,GACTqB,OAAQ,iBACRC,aAAc,OACdlD,SAEFa,cAACf,EAAmB,CAACG,eAzEVkD,KACzBC,QAAQC,IAAI,oBACZ/B,GAASD,EAAK,EAuEwDrB,SACtDa,cAACsB,IAAM,CACLR,MAAO,CAAEE,MAAO,QAChBO,MAAM,QACNC,WAAW,OACXC,SAAS,SACTC,SAAS,OACTC,YAAY,SACZC,KAAK,KACLC,QAASA,IAAMxB,IAAmBlB,SACnC,sBAQTa,cAACsB,IAAM,CACLK,YAAY,SACZC,KAAK,KACLC,QAASA,IAAMzB,IAAgBjB,SAChC,uBAQb,E,OC0QesD,I,0BCkSAC,MA3oBf,WACE,MAAOC,EAAaC,GAAkBlC,mBAASmC,OAAOC,YACtD,IAAIC,EAAYF,OAAOG,SACvB,MACOC,EAAUC,GAAexC,wBAASyC,IAClC7C,EAAY8C,GAAiB1C,mBAAS,KACtC2C,EAAaC,GAAkB5C,mBAAS,IACxC6C,EAAYC,GAAiB9C,mBAAS,IACtC+C,EAAUC,GAAehD,mBAAS,KAClCiD,EAAQC,GAAalD,mBAAS,KAC9BmD,EAAQC,GAAapD,mBAAS,KAE/B,OAAEqD,EAAM,OAAEC,EAAM,QAAEC,GAAYC,cAEpCtE,qBAAU,KACR,MAAMuE,EAAeA,KACnBvB,EAAeC,OAAOC,WAAW,EAOnC,OAHAD,OAAO/C,iBAAiB,SAAUqE,GAG3B,KACLtB,OAAO9C,oBAAoB,SAAUoE,EAAa,CACnD,GACA,IAIH,MAAM/D,EAAgBgE,UACpB,IAAIC,EAAWxB,OAAOG,SAEE,qBAAbqB,GAGTA,EACGC,QAAQ,CAAEC,OAAQ,wBAClBC,MAAMC,IACLrB,EAAcqB,EAAS,GAAG,IAE3BC,OAAOC,IACNpC,QAAQC,IAAImC,EAAI,GAEtB,EAmBF/E,qBAAU,KACRgF,GAAW,IAKbhF,qBAAU,KAGRQ,IApBqBgE,WACrB,IAAIC,EAAWxB,OAAOG,SACtB,MAEMC,EAAW,IAFJ,IAAI4B,IAAKR,GAEIS,IAAIC,UAC5BC,EAAgBC,IAtDK,8CAyDvB/B,EAAYD,EAAS,EAarBiC,EAAgB,GACf,CAACnC,IAIJ,MAAMoC,EAAWC,IACf,QAAiBjC,IAAbF,GAAyC,KAAf3C,EAAmB,CAC/C,IAAI+E,EAAiB,IAATD,EAEZnC,EAASqC,QACNH,QAAQC,GACRG,KAAK,CAAEC,KAAMlF,EAAY+E,MAAOA,IAChCb,MAAMiB,IACLlD,QAAQC,IAAIiD,GACZ/B,EAAY+B,EAAGC,iBACf5B,EACE,6BACA2B,EAAGE,GACH,IACAF,EAAGG,OAAOC,SAASC,aAAaC,SAElCxD,QAAQC,IAAIqB,GACZG,IACAY,GAAW,IAEZF,OAAOC,IACNpC,QAAQC,IAAImC,EAAI,GAEtB,GA8BIC,EAAYA,UACCzB,IAAbF,GAAyC,KAAf3C,GAC5B2C,EAASqC,QACNU,gBACAC,OACAzB,MAAM0B,IACL5C,EAAe4C,EAAO,IAIvBxB,OAAOC,IACNpC,QAAQC,IAAImC,EAAI,GAEtB,EA0BIwB,EAAUC,IAAOC,IAAGC,MAAAC,YAAA,gJASpBC,EAAUJ,IAAOC,IAAGI,MAAAF,YAAA,6JASpBG,EAAUN,IAAOC,IAAGM,MAAAJ,YAAA,0YAkBpBK,EAAUR,IAAOC,IAAGQ,MAAAN,YAAA,8MAUpBO,EAAwBV,IAAOW,EAACC,MAAAT,YAAA,2GAShCU,GAAc,IAAIC,IAAO,oBAAoBC,OAAS,IAAIC,KAC1DC,GAAe,IAAIH,IAAO,oBAAoBC,OAAS,IAAIC,MAC1DE,EAAMC,GAAW7G,mBAAS,IAC1B8G,EAAOC,GAAY/G,mBAAS,IAC5BgH,EAASC,IAAcjH,mBAAS,IAChCkH,GAASC,IAAcnH,mBAAS,IAChCoH,GAAOC,IAAYrH,mBAAS,IAC5BsH,GAAQC,IAAavH,mBAAS,IAC9BwH,GAAUC,IAAezH,mBAAS,IAClC0H,GAAUC,IAAe3H,mBAAS,IAElC4H,GAASC,IAAc7H,oBAAS,GA6BvC,OA3BAd,qBAAU,KACR,MAAM4I,EAAKC,YAAW,KAChBxB,EAAa,IACfM,EAAQmB,KAAKC,MAAM1B,EAAU,QAC7BQ,EAASiB,KAAKC,MAAO1B,EAAU,KAAuB,KACtDU,GAAWe,KAAKC,MAAO1B,EAAa,IAAO,GAAM,KACjDY,GAAWa,KAAKC,MAAO1B,EAAa,IAAQ,MAE1CI,EAAc,IAChBU,GAASW,KAAKC,MAAMtB,EAAW,QAC/BY,GAAUS,KAAKC,MAAOtB,EAAW,KAAuB,KACxDc,GAAYO,KAAKC,MAAOtB,EAAc,IAAO,GAAM,KACnDgB,GAAYK,KAAKC,MAAOtB,EAAc,IAAQ,KAChD,GACC,KAEH,MAAO,KACLuB,aAAaJ,EAAG,CACjB,IAUDxI,cAAA6I,WAAA,CAAA1J,SACEiC,eAAA,QAAAjC,SAAA,CACEa,cAAA,SAAO8I,OAAK,EAAA3J,SAAA,+TAaZiC,eAAAyH,WAAA,CAAA1J,SAAA,CACEa,cAACE,EAAG,CACFE,cAAeA,EACfC,iBA7OeA,KACvB+C,EAAc,IACd2F,MAAM,eAAe,EA4ObzI,WAAYA,IAEdc,eAAC4H,IAAI,CACHC,IAAKtG,EAAc,IAAM,OAAS,OAClCuG,aAAa,OACbhI,WAAW,SACXC,eAAe,SACfN,cAAe8B,EAAc,KAAO,SAAW,MAAMxD,SAAA,CAErDa,cAAA,OAAAb,SACEiC,eAAC4H,IAAI,CACHhI,MAAM,OACNU,SAAS,QACTT,QAAQ,OACRJ,cAAc,SACdM,eAAe,SACfI,MAAM,QAEN4H,UAAU,OAAMhK,SAAA,CAEhBa,cAACgJ,IAAI,CAAA7J,SACHiC,eAAC+E,EAAO,CAAAhH,SAAA,CACNa,cAACoJ,IAAI,CACHlI,WAAW,SACXC,eAA0B,SAC1BI,MAAM,QACNE,SAAoB,MACpBD,WAAW,OAAMrC,SCjVb,oBDqVNiC,eAACoF,EAAO,CAAArH,SAAA,CACNa,cAAA6I,WAAA,IAEAzH,eAACsF,EAAO,CAAAvH,SAAA,CACNa,cAAA,KAAAb,SAAG,gBACHa,cAAA,KAAAb,SAAG,SAGLiC,eAACwF,EAAO,CAAAzH,SAAA,CACNa,cAAA,KAAGqJ,KAAK,IAAI1J,OAAO,SAAS2J,IAAI,sBAAqBnK,SACnDa,cAACuJ,IAAO,MAEVvJ,cAAA,KAAGqJ,KAAK,IAAI1J,OAAO,SAAS2J,IAAI,sBAAqBnK,SACnDa,cAACwJ,IAAS,MAEZxJ,cAAA,KAAGqJ,KAAK,IAAI1J,OAAO,SAAS2J,IAAI,sBAAqBnK,SACnDa,cAACyJ,IAAS,YAIhBzJ,cAAC8G,EAAqB,CAAA3H,SCxWL,sOD2WjBa,cAAA,OAAKc,MAAO,CAAEE,MAAO,QAAS7B,SACZ,KAAfmB,EACCc,eAAA,OAAKsI,UAAU,oBAAoB5I,MAAO,CAAE6I,UAAW,IAAKxK,SAAA,CAO1DiC,eAAA,OACEN,MAAO,CACLsB,OAAQ,kBACRC,aAAc,MACdtB,QAAS,QACT5B,SAAA,CAEFiC,eAAA,OACEN,MAAO,CACLG,QAAS,OACTC,WAAY,SACZC,eAAgB,iBAChBhC,SAAA,CAEFa,cAAA,MAAIc,MAAO,CAAEU,WAAY,QAASrC,SAAC,YACnCiC,eAAA,OACEN,MAAO,CACLG,QAAS,OACTC,WAAY,UACZ/B,SAAA,CACH,aACY,IACXiC,eAAA,OAAKN,MAAO,CAAEG,QAAS,OAAQ2I,WAAY,QAASzK,SAAA,CAClDa,cAAA,OACEc,MAAO,CACLqB,WAAY,OACZyH,WAAY,MACZ7I,QAAS,MACTsB,aAAc,OACdlD,SAEDmI,EAAO,GAAE,IAAAuC,OAAOvC,GAASA,IAE5BtH,cAAA,OACEc,MAAO,CACLqB,WAAY,OACZyH,WAAY,MACZ7I,QAAS,MACTsB,aAAc,OACdlD,SAEDqI,EAAQ,GAAE,IAAAqC,OAAOrC,GAAUA,IAE9BxH,cAAA,OACEc,MAAO,CACLqB,WAAY,OACZyH,WAAY,MACZ7I,QAAS,MACTsB,aAAc,OACdlD,SAEDuI,EAAU,GAAE,IAAAmC,OAAOnC,GAAYA,IAElC1H,cAAA,OACEc,MAAO,CACLqB,WAAY,OACZyH,WAAY,MACZ7I,QAAS,MACTsB,aAAc,OACdlD,SAEDyI,GAAU,GAAE,IAAAiC,OAAOjC,IAAYA,cAKxCxG,eAAA,OACEN,MAAO,CACLG,QAAS,OACTE,eAAgB,gBAChBD,WAAY,SACZyI,UAAW,QACXxK,SAAA,CAEFiC,eAAA,KAAAjC,SAAA,CAAG,2CAEDa,cAAA,SAAM,mCAERA,cAACsB,IAAM,CAACO,QAASA,IAAMsD,EAAQ5B,GAC7BzC,MAAO,CACLqB,WAAY,OACZE,aAAc,MACdtB,QAAS,UACTQ,MAAO,SACPpC,SACH,oBAMLiC,eAAA,OACEN,MAAO,CACLsB,OAAQ,kBACRC,aAAc,MACdtB,QAAS,OACT4I,UAAW,QACXxK,SAAA,CAEFiC,eAAA,OACEN,MAAO,CACLG,QAAS,OACTC,WAAY,SACZC,eAAgB,iBAChBhC,SAAA,CAEFa,cAAA,MAAIc,MAAO,CAAEU,WAAY,QAASrC,SAAC,WACnCiC,eAAA,OACEN,MAAO,CACLG,QAAS,OACTC,WAAY,UACZ/B,SAAA,CACH,aACY,IACXiC,eAAA,OAAKN,MAAO,CAAEG,QAAS,OAAQ2I,WAAY,QAASzK,SAAA,CAClDa,cAAA,OACEc,MAAO,CACLqB,WAAY,OACZyH,WAAY,MACZ7I,QAAS,MACTsB,aAAc,OACdlD,SAED2I,GAAQ,GAAE,IAAA+B,OAAO/B,IAAUA,KAE9B9H,cAAA,OACEc,MAAO,CACLqB,WAAY,OACZyH,WAAY,MACZ7I,QAAS,MACTsB,aAAc,OACdlD,SAED6I,GAAS,GAAE,IAAA6B,OAAO7B,IAAWA,KAEhChI,cAAA,OACEc,MAAO,CACLqB,WAAY,OACZyH,WAAY,MACZ7I,QAAS,MACTsB,aAAc,OACdlD,SAED+I,GAAW,GAAE,IAAA2B,OAAO3B,IAAaA,KAEpClI,cAAA,OACEc,MAAO,CACLqB,WAAY,OACZyH,WAAY,MACZ7I,QAAS,MACTsB,aAAc,OACdlD,SAEDiJ,GAAW,GAAE,IAAAyB,OAAOzB,IAAaA,cAK1ChH,eAAA,OACEN,MAAO,CACLG,QAAS,OACTE,eAAgB,gBAChBD,WAAY,SACZyI,UAAW,QACXxK,SAAA,CAEFiC,eAAA,KAAAjC,SAAA,CAAG,2CAEDa,cAAA,SAAM,mCAERA,cAAA,UACEc,MAAO,CACLqB,WAAY,OACZE,aAAc,MACdtB,QAAS,UACTQ,MAAO,SAETM,QAASA,IAAMsD,EAAQ5B,GAAYpE,SAAE,uBAwC7Ca,cAACsB,IAAM,CACLR,MAAO,CAAEE,MAAO,QAChBO,MAAM,QACNC,WAAW,OACXC,SAAS,SACTC,SAAS,OACTC,YAAY,SACZC,KAAK,KACLC,QAASA,IAAMzB,IAAgBjB,SAChC,yBAeTa,cAACgJ,IAAI,CAAChI,MAAM,OAAOiI,IAAI,OAAM9J,SAC3Ba,cAAC8J,IAAK,CACJC,QAAS/J,cAACgK,IAAY,IACtBhJ,MAAM,OACNC,QAAQ,OACRgJ,QAAS,KACTC,IAAK,oBAKb9I,eAAA,OAAAjC,SAAA,CACEa,cAACgJ,IAAI,CAACzH,MAAM,QAAQV,cAAc,SAAQ1B,SACxCa,cAACmK,IAAK,CACJC,ICvnBG,gBDwnBHC,IAAI,gBACJC,OAAO,aACPtJ,MAAO,IACPuJ,OAAQ,IACRzJ,MAAO,CACL0J,SAAU7H,EAAc,IAAM,QAAU,QACxC4H,OAAQ,YAIdnJ,eAAC4H,IAAI,CAACnI,cAAc,SAASM,eAAe,SAAQhC,SAAA,CAClDiC,eAACgI,IAAI,CACHlI,WAAW,SACXK,MAAM,QACNC,WAAW,OACXC,SAAS,SACTC,SAAS,OACTkI,WAAW,UACXa,YAAY,UACZC,GAAI,EAAEvL,SAAA,CACP,gBACeoE,EAAW,IAtmBvB,QAymBJvD,cAAC2K,IAAQ,CACPhJ,YAAY,SACZiI,WAAW,UACXa,YAAY,UACZ/I,SAAS,OACTgJ,GAAc,EACd9I,KAAK,KACLyD,MACGuF,SACCA,SACF,sBAWpB,EEnqBeC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqBvG,MAAKtF,IAAkD,IAAjD,OAAE8L,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASlM,EACpE8L,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EAAY,GAExB,E,gBCHFO,IAASC,OACPtL,cAACuL,IAAMC,WAAU,CAAArM,SAEfiC,eAACqK,IAAc,CAAAtM,SAAA,CACba,cAAC0L,IAAe,CAACC,iBAAiB,SAElC3L,cAAC0C,EAAG,SAGR7C,SAAS+L,eAAe,SAO1Bf,G","file":"static/js/main.d05da960.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Button, HStack, useToast } from '@chakra-ui/react';\n\nconst OutsideClickHandler = ({ children, onOutsideClick }) => {\n  const wrapperRef = useRef(null);\n\n  const handleClickOutside = (event) => {\n    if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {\n      // Clicked outside the specified element\n      onOutsideClick();\n    }\n  };\n\n  useEffect(() => {\n    // Attach the event listener when the component mounts\n    document.addEventListener('mousedown', handleClickOutside);\n\n    // Detach the event listener when the component unmounts\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n\n  return <div ref={wrapperRef}>{children}</div>;\n};\n\nfunction Nav({ connectWallet, disconnectWallet, ethAddress }) {\n  const toast = useToast();\n  const [open, setOpen] = useState(false);\n\n  const handleOutsideClick = () => {\n    console.log('Clicked outside!');\n    setOpen(!open);\n    // Add your logic for handling clicks outside the element\n  };\n\n  return (\n    <div class=\"Aligner-item Aligner-item--top\">\n      <HStack flexDirection=\"column\">\n        <div\n          style={{\n            padding: '10px 20px',\n            width: '100%',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'end',\n          }}\n        >\n          {/* {ethAddress !== '' ? (\n            <Button\n              onClick={() => {\n                navigator.clipboard.writeText(ethAddress).then(\n                  toast({\n                    description: 'Address copied.',\n                    status: 'success',\n                    duration: 1000,\n                  })\n                );\n              }}\n            >\n              {ethAddress?.slice(0, 6)}...\n              {ethAddress?.slice(ethAddress.length - 4, ethAddress.length)}\n            </Button>\n          ) : (\n            ''\n          )} */}\n          {ethAddress !== '' ? (\n            <div style={{ position: 'relative' }}>\n              <Button\n                color=\"white\"\n                fontWeight=\"bold\"\n                fontSize=\"1.5rem\"\n                maxWidth=\"100%\"\n                colorScheme=\"purple\"\n                size=\"lg\"\n                onClick={() => setOpen(true)}\n                // onClick={() => {\n                //   navigator.clipboard.writeText(ethAddress).then(\n                //     toast({\n                //       description: 'Address copied.',\n                //       status: 'success',\n                //       duration: 1000,\n                //     })\n                //   );\n                // }}\n              >\n                {/* Disconnect */}\n                {ethAddress?.slice(0, 6)}...\n                {ethAddress?.slice(ethAddress.length - 4, ethAddress.length)}\n              </Button>\n              {open && (\n                <div\n                  style={{\n                    position: 'absolute',\n                    left: 0,\n                    right: 0,\n                    top: '50px',\n                    background: 'black',\n                    padding: 10,\n                    border: '1px solid #ccc',\n                    borderRadius: '8px',\n                  }}\n                >\n                  <OutsideClickHandler onOutsideClick={handleOutsideClick}>\n                    <Button\n                      style={{ width: '100%' }}\n                      color=\"white\"\n                      fontWeight=\"bold\"\n                      fontSize=\"1.5rem\"\n                      maxWidth=\"100%\"\n                      colorScheme=\"purple\"\n                      size=\"lg\"\n                      onClick={() => disconnectWallet()}\n                    >\n                      Disconnect\n                    </Button>\n                  </OutsideClickHandler>\n                </div>\n              )}\n            </div>\n          ) : (\n            <Button\n              colorScheme=\"purple\"\n              size=\"lg\"\n              onClick={() => connectWallet()}\n            >\n              Select Wallet\n            </Button>\n          )}\n        </div>\n      </HStack>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect, useState } from 'react';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport Web3 from 'web3';\nimport moment from 'moment';\nimport MintingContract from '../MintingContract.json';\nimport Nav from '../components/Nav';\nimport {\n  Center,\n  Box,\n  Head,\n  Image,\n  Button,\n  HStack,\n\n  VStack,\n  Heading,\n  Flex,\n  Link,\n  Card,\n  CardBody,\n  StackDivider,\n  Stack,\n  useToast,\n  Text,\n  useDisclosure,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  useMediaQuery,\n  Progress,\n} from '@chakra-ui/react';\nconst ReCaptach = () => {\n  const difference = +new moment('2023-12-04 05:30').utc() - +new Date();\n  const difference1 = +new moment('2023-12-06 05:30').utc() - +new Date();\n  const [days, setDays] = useState(0);\n  const [hours, setHours] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n  const [days1, setDays1] = useState(0);\n  const [hours1, setHours1] = useState(0);\n  const [minutes1, setMinutes1] = useState(0);\n  const [seconds1, setSeconds1] = useState(0);\n\n  const [verfied, setVerifed] = useState(false);\n\n  useEffect(() => {\n    const id = setTimeout(() => {\n      if (difference > 0) {\n        setDays(Math.floor(difference / (1000 * 60 * 60 * 24)));\n        setHours(Math.floor((difference / (1000 * 60 * 60)) % 24));\n        setMinutes(Math.floor((difference / 1000 / 60) % 60));\n        setSeconds(Math.floor((difference / 1000) % 60));\n      }\n      if (difference1 > 0) {\n        setDays1(Math.floor(difference1 / (1000 * 60 * 60 * 24)));\n        setHours1(Math.floor((difference1 / (1000 * 60 * 60)) % 24));\n        setMinutes1(Math.floor((difference1 / 1000 / 60) % 60));\n        setSeconds1(Math.floor((difference1 / 1000) % 60));\n      }\n    }, 1000);\n\n    return () => {\n      clearTimeout(id);\n    };\n  });\n\n  //recaptcha function\n  function onChange(value) {\n    console.log('Captcha value:', value);\n    setVerifed(true);\n  }\n\n  let ethWindow = window.ethereum;\n  const CONTRACT_ADDRESS = '0x77C9e7733550026AcE28950e973681C0F74191E3';\n  const [contract, setContract] = useState(undefined);\n  const [ethAddress, setEthAddress] = useState('');\n  const [totalSupply, setTotalSupply] = useState(0);\n  const [mintAmount, setMintAmount] = useState(1);\n  const [latestTx, setlatestTx] = useState('');\n  const [nftUrl, setNftUrl] = useState('');\n  const [osLink, setOsLink] = useState('');\n  const totalNfts = 8888;\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  // metamask related function\n\n  const connectWallet = async () => {\n    let provider = window.ethereum;\n\n    if (typeof provider !== 'undefined') {\n      // MetaMask is installed\n\n      provider\n        .request({ method: 'eth_requestAccounts' })\n        .then((accounts) => {\n          setEthAddress(accounts[0]);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  const disconnectWallet = () => {\n    setEthAddress('');\n    alert('disconnected');\n  };\n\n  const loadBlockchain = async () => {\n    let provider = window.ethereum;\n    const web3 = new Web3(provider);\n\n    const contract = new web3.eth.Contract(\n      MintingContract.abi,\n      CONTRACT_ADDRESS\n    );\n    setContract(contract);\n  };\n\n  const buyFlys = (number) => {\n    if (contract !== undefined && ethAddress !== '') {\n      var value = number * 20000000;\n\n      contract.methods\n        .buyFlys(number)\n        .send({ from: ethAddress, value: value })\n        .then((tx) => {\n          console.log(tx);\n          setlatestTx(tx.transactionHash);\n          setOsLink(\n            'https://opensea.io/assets/' +\n            tx.to +\n            '/' +\n            tx.events.Transfer.returnValues.tokenId\n          );\n          console.log(osLink);\n          onOpen();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n  const mintGiveawayFlys = (number) => {\n    if (contract !== undefined && ethAddress !== '') {\n      var value = number * 20000000;\n\n      contract.methods\n        .GiveawayFlys(number)\n        .send({ from: ethAddress, value: value })\n        .then((tx) => {\n          console.log(tx);\n          setlatestTx(tx.transactionHash);\n          setOsLink(\n            'https://opensea.io/assets/' +\n            tx.to +\n            '/' +\n            tx.events.Transfer.returnValues.tokenId\n          );\n          console.log(osLink);\n          onOpen();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  return (\n\n    <div className=\"container,display\" style={{ marginTop: 10 }}>\n      {/* <ReCAPTCHA\n        sitekey=\"6Ld4vh4pAAAAAFZ6Mw4U_W4yED0KiaUOUlmTDbEv\"\n        onChange={onChange}\n      /> */}\n      {/* WL MINT */}\n\n      <div\n        style={{\n          border: '1px solid white',\n          borderRadius: '5px',\n          padding: '20px',\n        }}\n      >\n        <div\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n          }}\n        >\n          <h1 style={{ fontWeight: 'bold' }}>WL MINT</h1>\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n            }}\n          >\n            Ending in:{' '}\n            <div style={{ display: 'flex', marginLeft: '10px' }}>\n              <div\n                style={{\n                  background: 'blue',\n                  marginLeft: '7px',\n                  padding: '5px',\n                  borderRadius: '3px',\n                }}\n              >\n                {days < 10 ? `0${days}` : days}\n              </div>\n              <div\n                style={{\n                  background: 'blue',\n                  marginLeft: '7px',\n                  padding: '5px',\n                  borderRadius: '3px',\n                }}\n              >\n                {hours < 10 ? `0${hours}` : hours}\n              </div>\n              <div\n                style={{\n                  background: 'blue',\n                  marginLeft: '7px',\n                  padding: '5px',\n                  borderRadius: '3px',\n                }}\n              >\n                {minutes < 10 ? `0${minutes}` : minutes}\n              </div>\n              <div\n                style={{\n                  background: 'blue',\n                  marginLeft: '7px',\n                  padding: '5px',\n                  borderRadius: '3px',\n                }}\n              >\n                {seconds < 10 ? `0${seconds}` : seconds}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginTop: '10px',\n          }}\n        >\n          <p>\n            Only users who are Whitelisted can mint!\n            <br />5 per wallet 0.01 SOL per NFT\n          </p>\n          <Button onClick={() => buyFlys(mintAmount)}\n            style={{\n              background: 'blue',\n              borderRadius: '5px',\n              padding: '5px 7px',\n              color: 'white',\n            }}\n          >\n            Mint Now!\n          </Button>\n        </div>\n      </div>\n      {/* PUBLIC */}\n      <div\n        style={{\n          border: '1px solid white',\n          borderRadius: '5px',\n          padding: '20px',\n          marginTop: '20px',\n        }}\n      >\n        <div\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n          }}\n        >\n          <h1 style={{ fontWeight: 'bold' }}>PUBLIC</h1>\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n            }}\n          >\n            Ending in:{' '}\n            <div style={{ display: 'flex', marginLeft: '10px' }}>\n              <div\n                style={{\n                  background: 'blue',\n                  marginLeft: '7px',\n                  padding: '5px',\n                  borderRadius: '3px',\n                }}\n              >\n                {days1 < 10 ? `0${days1}` : days1}\n              </div>\n              <div\n                style={{\n                  background: 'blue',\n                  marginLeft: '7px',\n                  padding: '5px',\n                  borderRadius: '3px',\n                }}\n              >\n                {hours1 < 10 ? `0${hours1}` : hours1}\n              </div>\n              <div\n                style={{\n                  background: 'blue',\n                  marginLeft: '7px',\n                  padding: '5px',\n                  borderRadius: '3px',\n                }}\n              >\n                {minutes1 < 10 ? `0${minutes1}` : minutes1}\n              </div>\n              <div\n                style={{\n                  background: 'blue',\n                  marginLeft: '7px',\n                  padding: '5px',\n                  borderRadius: '3px',\n                }}\n              >\n                {seconds1 < 10 ? `0${seconds1}` : seconds1}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginTop: '10px',\n          }}\n        >\n          <p>\n            Only users who are Whitelisted can mint!\n            <br />5 per wallet 0.01 SOL per NFT\n          </p>\n          <button\n            style={{\n              background: 'blue',\n              borderRadius: '5px',\n              padding: '5px 7px',\n              color: 'white',\n            }}\n            onClick={() => buyFlys(mintAmount)} >\n            Mint Now!\n          </button>\n        </div>\n      </div>\n\n      {/* <div id=\"wrapper\">\n        <div>\n          <p>Public Mint:</p>\n          <Button\n            style={{\n              width: '100%',\n              border: '1px solid #ccc',\n              marginTop: '10px',\n            }}\n            colorScheme=\"black\"\n            size=\"lg\"\n            onClick={() => buyFlys(mintAmount)}\n          >\n            {' '}\n            <Text></Text> MINT\n          </Button>\n        </div>\n        <div>\n          <p style={{ margin: '10px 0' }}>Allow List Mint:</p>\n          <Button\n            style={{ width: '100%' }}\n            disabled={!verfied}\n            colorScheme=\"black\"\n            size=\"lg\"\n            onClick={() => mintGiveawayFlys(mintAmount)}\n          >\n            {' '}\n            Whitelist Mint\n          </Button>\n        </div>\n      </div> */}\n    </div>\n  );\n};\n\nexport default ReCaptach;\n","import './App.css';\nimport Web3 from 'web3';\nimport MintingContract from './MintingContract.json';\nimport { useEffect, useState } from 'react';\nimport { image, headerText, collectionDescription } from './setting';\nimport styled from 'styled-components';\nimport { CiGlobe, CiTwitter } from 'react-icons/ci';\nimport { FaDiscord, FaGlobe, FaTwitter } from 'react-icons/fa';\nimport ReCaptach from './components/ReCaptach';\nimport moment from 'moment';\nimport {\n  Center,\n  Box,\n  Head,\n  Image,\n  Button,\n  HStack,\n  VStack,\n  Heading,\n  Flex,\n  Link,\n  StackDivider,\n  Stack,\n  useToast,\n  Text,\n  useDisclosure,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  useMediaQuery,\n  Progress,\n} from '@chakra-ui/react';\nimport Nav from './components/Nav';\n\nfunction App() {\n  const [screenWidth, setScreenWidth] = useState(window.innerWidth);\n  let ethWindow = window.ethereum;\n  const CONTRACT_ADDRESS = '0x77C9e7733550026AcE28950e973681C0F74191E3';\n  const [contract, setContract] = useState(undefined);\n  const [ethAddress, setEthAddress] = useState('');\n  const [totalSupply, setTotalSupply] = useState(0);\n  const [mintAmount, setMintAmount] = useState(1);\n  const [latestTx, setlatestTx] = useState('');\n  const [nftUrl, setNftUrl] = useState('');\n  const [osLink, setOsLink] = useState('');\n  const totalNfts = 8888;\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(() => {\n    const handleResize = () => {\n      setScreenWidth(window.innerWidth);\n    };\n\n    // Add event listener to update screen width on resize\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup the event listener on component unmount\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // metamask related function\n\n  const connectWallet = async () => {\n    let provider = window.ethereum;\n\n    if (typeof provider !== 'undefined') {\n      // MetaMask is installed\n\n      provider\n        .request({ method: 'eth_requestAccounts' })\n        .then((accounts) => {\n          setEthAddress(accounts[0]);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  const disconnectWallet = () => {\n    setEthAddress('');\n    alert('disconnected');\n  };\n\n  const loadBlockchain = async () => {\n    let provider = window.ethereum;\n    const web3 = new Web3(provider);\n\n    const contract = new web3.eth.Contract(\n      MintingContract.abi,\n      CONTRACT_ADDRESS\n    );\n    setContract(contract);\n  };\n\n  useEffect(() => {\n    getSupply();\n  });\n\n  //set nftShowcaseToggle to \"true\" to enable the showcase component (dev only)\n  const nftShowcaseToggle = false;\n  useEffect(() => {\n    // uncomment nftShowcase() for nft showcase\n    // nftShowcase();\n    connectWallet();\n    loadBlockchain();\n  }, [ethWindow]);\n\n  // minting function\n\n  const buyFlys = (number) => {\n    if (contract !== undefined && ethAddress !== '') {\n      var value = number * 20000000;\n\n      contract.methods\n        .buyFlys(number)\n        .send({ from: ethAddress, value: value })\n        .then((tx) => {\n          console.log(tx);\n          setlatestTx(tx.transactionHash);\n          setOsLink(\n            'https://opensea.io/assets/' +\n            tx.to +\n            '/' +\n            tx.events.Transfer.returnValues.tokenId\n          );\n          console.log(osLink);\n          onOpen();\n          getSupply();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n  const mintGiveawayFlys = (number) => {\n    if (contract !== undefined && ethAddress !== '') {\n      var value = number * 20000000;\n\n      contract.methods\n        .GiveawayFlys(number)\n        .send({ from: ethAddress, value: value })\n        .then((tx) => {\n          console.log(tx);\n          setlatestTx(tx.transactionHash);\n          setOsLink(\n            'https://opensea.io/assets/' +\n            tx.to +\n            '/' +\n            tx.events.Transfer.returnValues.tokenId\n          );\n          console.log(osLink);\n          onOpen();\n          getSupply();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  // getting total nft supply function\n\n  const getSupply = () => {\n    if (contract !== undefined && ethAddress !== '') {\n      contract.methods\n        .currentSupply()\n        .call()\n        .then((supply) => {\n          setTotalSupply(supply);\n          // console.log(supply);\n        })\n\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  // uncomment this function if you want to enable showcasing nfts from a selected NFT collection (using fidenza as an example here)\n  // function nftShowcase() {\n  //   between(1, 998);\n  //   setTimeout(nftShowcase, 5000);\n  // }\n\n  function between(min, max) {\n    const tokenGen = Math.floor(Math.random() * (max - min + 1) + min);\n    let tokenID = '';\n\n    if (tokenGen <= 10) {\n      tokenID = tokenGen <= 10 ? tokenGen : '00' + tokenGen;\n    } else {\n      tokenID = tokenGen >= 100 ? tokenGen : '0' + tokenGen;\n    }\n\n    // console.log(tokenGen);\n    console.log(tokenID);\n    setNftUrl('https://media.artblocks.io/78000' + tokenID + '.png');\n\n    return;\n  }\n\n  const Content = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    padding: 0px;\n    gap: 32px;\n    width: 100%;\n  `;\n\n  const InfoRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    width: 100%;\n    padding: 0;\n    gap: 16px;\n    flex-wrap: wrap;\n  `;\n  const InfoBox = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    padding: 10px 16px;\n    gap: 8px;\n    border: 2px solid #ffffff;\n    border-radius: 4px;\n    font-weight: 600;\n    font-size: 20px;\n    line-height: 100%;\n    text-transform: uppercase;\n    color: var(--white);\n\n    @media only screen and (max-width: 450px) {\n      font-size: 18px;\n    }\n  `;\n  const IconRow = styled.div`\n    display: flex;\n    justify-content: space-between;\n    flex-direction: row;\n    align-items: center;\n    padding: 0px;\n    gap: 24px;\n    margin-bottom: -3px;\n    margin-left: 1rem;\n  `;\n  const CollectionDescription = styled.p`\n    font-weight: 400;\n    font-size: 20px;\n    line-height: 150%;\n    margin-bottom: 1rem;\n  `;\n\n\n\n  const difference = +new moment('2023-12-04 05:30').utc() - +new Date();\n  const difference1 = +new moment('2023-12-06 05:30').utc() - +new Date();\n  const [days, setDays] = useState(0);\n  const [hours, setHours] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n  const [days1, setDays1] = useState(0);\n  const [hours1, setHours1] = useState(0);\n  const [minutes1, setMinutes1] = useState(0);\n  const [seconds1, setSeconds1] = useState(0);\n\n  const [verfied, setVerifed] = useState(false);\n\n  useEffect(() => {\n    const id = setTimeout(() => {\n      if (difference > 0) {\n        setDays(Math.floor(difference / (1000 * 60 * 60 * 24)));\n        setHours(Math.floor((difference / (1000 * 60 * 60)) % 24));\n        setMinutes(Math.floor((difference / 1000 / 60) % 60));\n        setSeconds(Math.floor((difference / 1000) % 60));\n      }\n      if (difference1 > 0) {\n        setDays1(Math.floor(difference1 / (1000 * 60 * 60 * 24)));\n        setHours1(Math.floor((difference1 / (1000 * 60 * 60)) % 24));\n        setMinutes1(Math.floor((difference1 / 1000 / 60) % 60));\n        setSeconds1(Math.floor((difference1 / 1000) % 60));\n      }\n    }, 1000);\n\n    return () => {\n      clearTimeout(id);\n    };\n  });\n\n  //recaptcha function\n  function onChange(value) {\n    console.log('Captcha value:', value);\n    setVerifed(true);\n  }\n\n  return (\n    <>\n      <main>\n        <style index>\n          {`\n            html {\n              height: 100%;\n              background: black; /* fallback for old browsers */\n            }\n            body {\n              // background: #673ab7; /* fallback for old browsers */\n              background: black; /* fallback for old browsers */\n            }\n          `}\n        </style>\n\n        <>\n          <Nav\n            connectWallet={connectWallet}\n            disconnectWallet={disconnectWallet}\n            ethAddress={ethAddress}\n          />\n          <Flex\n            gap={screenWidth > 650 ? '20px' : '10px'}\n            marginBottom=\"20px\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            flexDirection={screenWidth < 1100 ? 'column' : 'row'}\n          >\n            <div>\n              <Flex\n                width=\"100%\"\n                maxWidth=\"600px\"\n                display=\"flex\"\n                flexDirection=\"column\"\n                justifyContent=\"center\"\n                color=\"white\"\n                // height=\"45rem\"\n                maxHeight=\"100%\"\n              >\n                <Flex>\n                  <Content>\n                    <Text\n                      alignItems=\"center\"\n                      justifyContent={'650px' ? 'center' : 'flex-start'}\n                      color=\"white\"\n                      fontSize={'650px' ? '5vh' : '3.5rem'}\n                      fontWeight=\"bold\"\n                    >\n                      {headerText}\n                    </Text>\n                    <InfoRow>\n                      <></>\n\n                      <InfoBox>\n                        <p>Total items</p>\n                        <p> </p>\n                      </InfoBox>\n\n                      <IconRow>\n                        <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n                          <FaGlobe></FaGlobe>\n                        </a>\n                        <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n                          <FaTwitter></FaTwitter>\n                        </a>\n                        <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n                          <FaDiscord></FaDiscord>\n                        </a>\n                      </IconRow>\n                    </InfoRow>\n                    <CollectionDescription>\n                      {collectionDescription}\n                    </CollectionDescription>\n                    <div style={{ width: '100%' }}>\n                      {ethAddress !== '' ? (\n                        <div className=\"container,display\" style={{ marginTop: 10 }}>\n                          {/* <ReCAPTCHA\n        sitekey=\"6Ld4vh4pAAAAAFZ6Mw4U_W4yED0KiaUOUlmTDbEv\"\n        onChange={onChange}\n      /> */}\n                          {/* WL MINT */}\n\n                          <div\n                            style={{\n                              border: '1px solid white',\n                              borderRadius: '5px',\n                              padding: '20px',\n                            }}\n                          >\n                            <div\n                              style={{\n                                display: 'flex',\n                                alignItems: 'center',\n                                justifyContent: 'space-between',\n                              }}\n                            >\n                              <h1 style={{ fontWeight: 'bold' }}>WL MINT</h1>\n                              <div\n                                style={{\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                }}\n                              >\n                                Ending in:{' '}\n                                <div style={{ display: 'flex', marginLeft: '10px' }}>\n                                  <div\n                                    style={{\n                                      background: 'blue',\n                                      marginLeft: '7px',\n                                      padding: '5px',\n                                      borderRadius: '3px',\n                                    }}\n                                  >\n                                    {days < 10 ? `0${days}` : days}\n                                  </div>\n                                  <div\n                                    style={{\n                                      background: 'blue',\n                                      marginLeft: '7px',\n                                      padding: '5px',\n                                      borderRadius: '3px',\n                                    }}\n                                  >\n                                    {hours < 10 ? `0${hours}` : hours}\n                                  </div>\n                                  <div\n                                    style={{\n                                      background: 'blue',\n                                      marginLeft: '7px',\n                                      padding: '5px',\n                                      borderRadius: '3px',\n                                    }}\n                                  >\n                                    {minutes < 10 ? `0${minutes}` : minutes}\n                                  </div>\n                                  <div\n                                    style={{\n                                      background: 'blue',\n                                      marginLeft: '7px',\n                                      padding: '5px',\n                                      borderRadius: '3px',\n                                    }}\n                                  >\n                                    {seconds < 10 ? `0${seconds}` : seconds}\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                            <div\n                              style={{\n                                display: 'flex',\n                                justifyContent: 'space-between',\n                                alignItems: 'center',\n                                marginTop: '10px',\n                              }}\n                            >\n                              <p>\n                                Only users who are Whitelisted can mint!\n                                <br />5 per wallet 0.01 SOL per NFT\n                              </p>\n                              <Button onClick={() => buyFlys(mintAmount)}\n                                style={{\n                                  background: 'blue',\n                                  borderRadius: '5px',\n                                  padding: '5px 7px',\n                                  color: 'white',\n                                }}\n                              >\n                                Mint Now!\n                              </Button>\n                            </div>\n                          </div>\n                          {/* PUBLIC */}\n                          <div\n                            style={{\n                              border: '1px solid white',\n                              borderRadius: '5px',\n                              padding: '20px',\n                              marginTop: '20px',\n                            }}\n                          >\n                            <div\n                              style={{\n                                display: 'flex',\n                                alignItems: 'center',\n                                justifyContent: 'space-between',\n                              }}\n                            >\n                              <h1 style={{ fontWeight: 'bold' }}>PUBLIC</h1>\n                              <div\n                                style={{\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                }}\n                              >\n                                Ending in:{' '}\n                                <div style={{ display: 'flex', marginLeft: '10px' }}>\n                                  <div\n                                    style={{\n                                      background: 'blue',\n                                      marginLeft: '7px',\n                                      padding: '5px',\n                                      borderRadius: '3px',\n                                    }}\n                                  >\n                                    {days1 < 10 ? `0${days1}` : days1}\n                                  </div>\n                                  <div\n                                    style={{\n                                      background: 'blue',\n                                      marginLeft: '7px',\n                                      padding: '5px',\n                                      borderRadius: '3px',\n                                    }}\n                                  >\n                                    {hours1 < 10 ? `0${hours1}` : hours1}\n                                  </div>\n                                  <div\n                                    style={{\n                                      background: 'blue',\n                                      marginLeft: '7px',\n                                      padding: '5px',\n                                      borderRadius: '3px',\n                                    }}\n                                  >\n                                    {minutes1 < 10 ? `0${minutes1}` : minutes1}\n                                  </div>\n                                  <div\n                                    style={{\n                                      background: 'blue',\n                                      marginLeft: '7px',\n                                      padding: '5px',\n                                      borderRadius: '3px',\n                                    }}\n                                  >\n                                    {seconds1 < 10 ? `0${seconds1}` : seconds1}\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                            <div\n                              style={{\n                                display: 'flex',\n                                justifyContent: 'space-between',\n                                alignItems: 'center',\n                                marginTop: '10px',\n                              }}\n                            >\n                              <p>\n                                Only users who are Whitelisted can mint!\n                                <br />5 per wallet 0.01 SOL per NFT\n                              </p>\n                              <button\n                                style={{\n                                  background: 'blue',\n                                  borderRadius: '5px',\n                                  padding: '5px 7px',\n                                  color: 'white',\n                                }}\n                                onClick={() => buyFlys(mintAmount)} >\n                                Mint Now!\n                              </button>\n                            </div>\n                          </div>\n\n                          {/* <div id=\"wrapper\">\n        <div>\n          <p>Public Mint:</p>\n          <Button\n            style={{\n              width: '100%',\n              border: '1px solid #ccc',\n              marginTop: '10px',\n            }}\n            colorScheme=\"black\"\n            size=\"lg\"\n            onClick={() => buyFlys(mintAmount)}\n          >\n            {' '}\n            <Text></Text> MINT\n          </Button>\n        </div>\n        <div>\n          <p style={{ margin: '10px 0' }}>Allow List Mint:</p>\n          <Button\n            style={{ width: '100%' }}\n            disabled={!verfied}\n            colorScheme=\"black\"\n            size=\"lg\"\n            onClick={() => mintGiveawayFlys(mintAmount)}\n          >\n            {' '}\n            Whitelist Mint\n          </Button>\n        </div>\n      </div> */}\n                        </div>\n\n                      ) : (\n                        <Button\n                          style={{ width: '100%' }}\n                          color=\"white\"\n                          fontWeight=\"bold\"\n                          fontSize=\"1.5rem\"\n                          maxWidth=\"100%\"\n                          colorScheme=\"purple\"\n                          size=\"lg\"\n                          onClick={() => connectWallet()}\n                        >\n                          Select Wallet\n                        </Button>\n                      )}\n                    </div>\n\n                  </Content>\n                </Flex>\n                {/* <Text marginBottom=\"30px\" width=\"100%\">\n                  Lorem ipsum dolor sit amet consectetur adipisicing elit.\n                  Adipisci laudantium at, error reprehenderit minima\n                  repellendus! Eveniet voluptatem iusto repudiandae suscipit,\n                  expedita quibusdam quaerat officiis atque at ab libero, labore\n                  eaque!\n                </Text> */}\n                <Flex width=\"100%\" gap=\"20px\">\n                  <Stack\n                    divider={<StackDivider />}\n                    width=\"100%\"\n                    display=\"flex\"\n                    rounded={'lg'}\n                    pos={'relative'}\n                  ></Stack>\n                </Flex>\n              </Flex>\n            </div>\n            <div>\n              <Flex color=\"white\" flexDirection=\"column\">\n                <Image\n                  src={image}\n                  alt=\"project Image\"\n                  layout=\"responsive\"\n                  width={100}\n                  height={100}\n                  style={{\n                    minWidth: screenWidth < 650 ? '400px' : '500px',\n                    height: 'auto',\n                  }}\n                />\n              </Flex>\n              <Flex flexDirection=\"column\" justifyContent=\"center\">\n                <Text\n                  alignItems=\"center\"\n                  color=\"white\"\n                  fontWeight=\"bold\"\n                  fontSize=\"1.5rem\"\n                  maxWidth=\"100%\"\n                  marginLeft=\"1.25rem\"\n                  marginRight=\"1.25rem\"\n                  mt={5}\n                >\n                  Total Minted {mintAmount}/\n                  {totalNfts}\n                </Text>\n                <Progress\n                  colorScheme=\"purple\"\n                  marginLeft=\"1.25rem\"\n                  marginRight=\"1.25rem\"\n                  maxWidth=\"100%\"\n                  mt={\"650px\" ? 1 : 3}\n                  size=\"sm\"\n                  value={\n                    (Number() /\n                      Number()) *\n                    100\n                  }\n                />\n              </Flex>\n            </div>\n          </Flex>\n\n        </>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","// Purpose: Contains texts that will be used in the UI when rendering the buttons\n// label has to be the exact same as in your candy machine config\n\nexport const mintText = [\n    { label: \"WL\", mintText: \"Only users who are whitelisted can mint!\", buttonLabel: \"Mint now!\", buttonDisabledLabel: \"Mint now!\", header: \"WL Mint\" },\n    { label: \"default\", mintText: \"default mint paying with SOL\", buttonLabel: \"Mint now!\", buttonDisabledLabel: \"Mint now!\", header: \"default Mint\" },\n    { label: \"Public\", mintText: \"Public mint! All users can mint\", buttonLabel: \"Mint now!\", buttonDisabledLabel: \"Mint now!\", header: \"public\" }\n];\n\n//header image in the ui. replace with your own\nexport const image = \"./display.gif\";\n\n//website title\nexport const headerText = \"COLLECTION NAME\";\nexport const collectionDescription = \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Rem minima velit aliquid voluptates quasi placeat corporis dicta maxime. Ad, similique. Veritatis corrupti eveniet eligendi ratione autem. Dolores cumque dolorem harum.\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\";\nReactDOM.render(\n  <React.StrictMode>\n\n    <ChakraProvider>\n      <ColorModeScript initialColorMode=\"dark\" />\n\n      <App />\n    </ChakraProvider>\n  </React.StrictMode >,\n  document.getElementById(\"root\")\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}